BS::thread_pool: a fast, lightweight, and easy-to-use C++17 thread pool library
(c) 2022 Barak Shoshany (baraksh@gmail.com) (http://baraksh.com)
GitHub: https://github.com/bshoshany/thread-pool

Thread pool library version is v3.3.0 (2022-08-03).
Hardware concurrency is 8.
Generating log file: BS_thread_pool_test-2023-04-11_09.19.13.log.

Important: Please do not run any other applications, especially multithreaded applications, in parallel with this test!

====================================
Checking that the constructor works:
====================================
Checking that the thread pool reports a number of threads equal to the hardware concurrency...
Expected: 8, obtained: 8 -> PASSED!
Checking that the manually counted number of unique thread IDs is equal to the reported number of threads...
Expected: 8, obtained: 8 -> PASSED!

============================
Checking that reset() works:
============================
Checking that after reset() the thread pool reports a number of threads equal to half the hardware concurrency...
Expected: 4, obtained: 4 -> PASSED!
Checking that after reset() the manually counted number of unique thread IDs is equal to the reported number of threads...
Expected: 4, obtained: 4 -> PASSED!
Checking that after a second reset() the thread pool reports a number of threads equal to the hardware concurrency...
Expected: 8, obtained: 8 -> PASSED!
Checking that after a second reset() the manually counted number of unique thread IDs is equal to the reported number of threads...
Expected: 8, obtained: 8 -> PASSED!

================================
Checking that push_task() works:
================================
Checking that push_task() works for a function with no arguments or return value...
-> PASSED!
Checking that push_task() works for a function with one argument and no return value...
-> PASSED!
Checking that push_task() works for a function with two arguments and no return value...
-> PASSED!

=============================
Checking that submit() works:
=============================
Checking that submit() works for a function with no arguments or return value...
-> PASSED!
Checking that submit() works for a function with one argument and no return value...
-> PASSED!
Checking that submit() works for a function with two arguments and no return value...
-> PASSED!
Checking that submit() works for a function with no arguments and a return value...
-> PASSED!
Checking that submit() works for a function with one argument and a return value...
-> PASSED!
Checking that submit() works for a function with two arguments and a return value...
-> PASSED!

================================================
Checking that submitting member functions works:
================================================
Checking that push_task() works for a member function with no arguments or return value...
-> PASSED!
Checking that push_task() works for a member function with one argument and no return value...
-> PASSED!
Checking that submit() works for a member function with no arguments or return value...
-> PASSED!
Checking that submit() works for a member function with one argument and no return value...
-> PASSED!
Checking that submit() works for a member function with no arguments and a return value...
-> PASSED!
Checking that submit() works for a member function with one argument and a return value...
-> PASSED!

======================================================================
Checking that submitting member functions from within an object works:
======================================================================
Checking that push_task() works within an object for a member function with no arguments or return value...
-> PASSED!
Checking that push_task() works within an object for a member function with one argument and no return value...
-> PASSED!
Checking that submit() works within an object for a member function with no arguments or return value...
-> PASSED!
Checking that submit() works within an object for a member function with one argument and no return value...
-> PASSED!
Checking that submit() works within an object for a member function with no arguments and a return value...
-> PASSED!
Checking that submit() works within an object for a member function with one argument and a return value...
-> PASSED!

=======================================
Checking that wait_for_tasks() works...
=======================================
Waiting for tasks...
-> PASSED!

======================================================
Checking that push_loop() and parallelize_loop() work:
======================================================
Verifying that push_loop() from -304120 to -435261 with 1 task modifies all indices...
-> PASSED!
Verifying that push_loop() from -189069 to -308382 with 3 tasks modifies all indices...
-> PASSED!
Verifying that push_loop() from 185758 to -115153 with 5 tasks modifies all indices...
-> PASSED!
Verifying that push_loop() from 198979 to -839337 with 6 tasks modifies all indices...
-> PASSED!
Verifying that push_loop() from -907837 to -673938 with 7 tasks modifies all indices...
-> PASSED!
Verifying that push_loop() from 270052 to -163654 with 5 tasks modifies all indices...
-> PASSED!
Verifying that push_loop() from 763886 to 369123 with 1 task modifies all indices...
-> PASSED!
Verifying that push_loop() from -878506 to 240793 with 4 tasks modifies all indices...
-> PASSED!
Verifying that push_loop() from -115072 to -730212 with 3 tasks modifies all indices...
-> PASSED!
Verifying that push_loop() from 676554 to 492193 with 3 tasks modifies all indices...
-> PASSED!
Verifying that parallelize_loop() from -414829 to -698609 with 2 tasks modifies all indices...
-> PASSED!
Verifying that parallelize_loop() from 217915 to -134408 with 4 tasks modifies all indices...
-> PASSED!
Verifying that parallelize_loop() from -342770 to -803525 with 3 tasks modifies all indices...
-> PASSED!
Verifying that parallelize_loop() from -138549 to -256562 with 3 tasks modifies all indices...
-> PASSED!
Verifying that parallelize_loop() from 474401 to 343176 with 6 tasks modifies all indices...
-> PASSED!
Verifying that parallelize_loop() from -58435 to -479467 with 1 task modifies all indices...
-> PASSED!
Verifying that parallelize_loop() from -416521 to -105750 with 1 task modifies all indices...
-> PASSED!
Verifying that parallelize_loop() from -31319 to -362778 with 2 tasks modifies all indices...
-> PASSED!
Verifying that parallelize_loop() from -257487 to -847902 with 6 tasks modifies all indices...
-> PASSED!
Verifying that parallelize_loop() from 361173 to -445555 with 1 task modifies all indices...
-> PASSED!
Verifying that parallelize_loop() from 312511 to 347473 with 8 tasks correctly sums all indices...
Expected: 23074325646, obtained: 23074325646 -> PASSED!
Verifying that parallelize_loop() from 343241 to -310508 with 5 tasks correctly sums all indices...
Expected: 21398512268, obtained: 21398512268 -> PASSED!
Verifying that parallelize_loop() from -331613 to 700810 with 2 tasks correctly sums all indices...
Expected: 381166441908, obtained: 381166441908 -> PASSED!
Verifying that parallelize_loop() from -649951 to -750158 with 7 tasks correctly sums all indices...
Expected: -140300822770, obtained: -140300822770 -> PASSED!
Verifying that parallelize_loop() from 209525 to 119976 with 8 tasks correctly sums all indices...
Expected: 29506395500, obtained: 29506395500 -> PASSED!
Verifying that parallelize_loop() from -308250 to 854794 with 2 tasks correctly sums all indices...
Expected: 635653556892, obtained: 635653556892 -> PASSED!
Verifying that parallelize_loop() from 495512 to -266517 with 3 tasks correctly sums all indices...
Expected: 174500068826, obtained: 174500068826 -> PASSED!
Verifying that parallelize_loop() from 83113 to 911389 with 4 tasks correctly sums all indices...
Expected: 823721310276, obtained: 823721310276 -> PASSED!
Verifying that parallelize_loop() from -822278 to 233150 with 6 tasks correctly sums all indices...
Expected: -621783242212, obtained: -621783242212 -> PASSED!
Verifying that parallelize_loop() from -615193 to -114609 with 3 tasks correctly sums all indices...
Expected: -365327704952, obtained: -365327704952 -> PASSED!
Verifying that parallelize_loop() with identical start and end indices does nothing...
-> PASSED!
Trying parallelize_loop() with start and end indices of different types:
Verifying that parallelize_loop() from 495099 to 98332 with 3 tasks modifies all indices...
-> PASSED!
Trying the overloads for push_loop() and parallelize_loop() for the case where the first index is equal to 0:
Verifying that push_loop() from 0 to -837788 with 2 tasks modifies all indices...
-> PASSED!
Verifying that parallelize_loop() from 0 to 542090 with 6 tasks modifies all indices...
-> PASSED!
Verifying that parallelize_loop() from 0 to 176324 with 8 tasks correctly sums all indices...
Expected: 31089976652, obtained: 31089976652 -> PASSED!

====================================
Checking that task monitoring works:
====================================
Resetting pool to 4 threads.
Submitting 12 tasks.
After submission, should have: 12 tasks total, 4 tasks running, 8 tasks queued...
Result: 12 tasks total, 4 tasks running, 8 tasks queued -> PASSED!
Task 3 released.
Task 2 released.
Task 0 released.
Task 1 released.
After releasing 4 tasks, should have: 8 tasks total, 4 tasks running, 4 tasks queued...
Result: 8 tasks total, 4 tasks running, 4 tasks queued -> PASSED!
Task 7 released.
Task 4 released.
Task 5 released.
Task 6 released.
After releasing 4 more tasks, should have: 4 tasks total, 4 tasks running, 0 tasks queued...
Result: 4 tasks total, 4 tasks running, 0 tasks queued -> PASSED!
Task 11 released.
Task 10 released.
Task 9 released.
Task 8 released.
After releasing the final 4 tasks, should have: 0 tasks total, 0 tasks running, 0 tasks queued...
Result: 0 tasks total, 0 tasks running, 0 tasks queued -> PASSED!
Resetting pool to 8 threads.

============================
Checking that pausing works:
============================
Resetting pool to 4 threads.
Checking that the pool correctly reports that it is not paused.
-> PASSED!
Pausing pool.
Checking that the pool correctly reports that it is paused.
-> PASSED!
Submitting 12 tasks, each one waiting for 200ms.
Immediately after submission, should have: 12 tasks total, 0 tasks running, 12 tasks queued...
Result: 12 tasks total, 0 tasks running, 12 tasks queued -> PASSED!
300ms later, should still have: 12 tasks total, 0 tasks running, 12 tasks queued...
Result: 12 tasks total, 0 tasks running, 12 tasks queued -> PASSED!
Unpausing pool.
Checking that the pool correctly reports that it is not paused.
-> PASSED!
Task 0 done.
Task 3 done.
Task 1 done.
Task 2 done.
300ms later, should have: 8 tasks total, 4 tasks running, 4 tasks queued...
Result: 8 tasks total, 4 tasks running, 4 tasks queued -> PASSED!
Pausing pool and using wait_for_tasks() to wait for the running tasks.
Task 6 done.
Task 4 done.
Task 7 done.
Task 5 done.
After waiting, should have: 4 tasks total, 0 tasks running, 4 tasks queued...
Result: 4 tasks total, 0 tasks running, 4 tasks queued -> PASSED!
200ms later, should still have: 4 tasks total, 0 tasks running, 4 tasks queued...
Result: 4 tasks total, 0 tasks running, 4 tasks queued -> PASSED!
Unpausing pool and using wait_for_tasks() to wait for all tasks.
Task 11 done.
Task 8 done.
Task 10 done.
Task 9 done.
After waiting, should have: 0 tasks total, 0 tasks running, 0 tasks queued...
Result: 0 tasks total, 0 tasks running, 0 tasks queued -> PASSED!
Resetting pool to 8 threads.

=======================================
Checking that exception handling works:
=======================================
Checking that exceptions are forwarded correctly by submit()...
Throwing exception...
-> PASSED!
Checking that exceptions are forwarded correctly by BS::multi_future...
Throwing exception...
Throwing exception...
-> PASSED!

============================================================
Testing that vector operations produce the expected results:
============================================================
Adding two vectors with 583236 elements using 7 tasks...
-> PASSED!
Adding two vectors with 876656 elements using 8 tasks...
-> PASSED!
Adding two vectors with 76929 elements using 2 tasks...
-> PASSED!
Adding two vectors with 324775 elements using 4 tasks...
-> PASSED!
Adding two vectors with 497691 elements using 1 tasks...
-> PASSED!
Adding two vectors with 166150 elements using 2 tasks...
-> PASSED!
Adding two vectors with 167928 elements using 4 tasks...
-> PASSED!
Adding two vectors with 848072 elements using 5 tasks...
-> PASSED!
Adding two vectors with 367856 elements using 5 tasks...
-> PASSED!
Adding two vectors with 678287 elements using 5 tasks...
-> PASSED!

++++++++++++++++++++++++++++++
SUCCESS: Passed all 88 checks!
++++++++++++++++++++++++++++++

======================
Performing benchmarks:
======================
Using 8 threads.
Each test will be repeated 20 times to collect reliable statistics.
Determining the number and size of vectors to generate in order to achieve an approximate mean execution time of 50 ms with 8 tasks...
Generating 1328 vectors with 2048 elements each:
Single-threaded, mean execution time was  282.1 ms with standard deviation  2.4 ms.
With    2 tasks, mean execution time was  144.8 ms with standard deviation  2.2 ms.
With    4 tasks, mean execution time was   83.8 ms with standard deviation  1.9 ms.
With    8 tasks, mean execution time was   48.5 ms with standard deviation  1.4 ms.
With   16 tasks, mean execution time was   49.8 ms with standard deviation  1.8 ms.
With   32 tasks, mean execution time was   53.8 ms with standard deviation  3.3 ms.
Maximum speedup obtained by multithreading vs. single-threading: 5.8x, using 8 tasks.

+++++++++++++++++++++++++++++++++++++++
Thread pool performance test completed!
+++++++++++++++++++++++++++++++++++++++
